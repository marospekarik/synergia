<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cubemos.Core</name>
    </assembly>
    <members>
        <member name="T:Cubemos.Plugin">
            @addtogroup csharp
            @{
            <summary>
            The enumeration for the available cubemos plugins
            </summary>
        </member>
        <member name="F:Cubemos.Plugin.CM_INTEL_PLUGIN">
            Intel inference engine plugin
        </member>
        <member name="F:Cubemos.Plugin.CM_UNIMPLEMENTED_PLUGIN">
            Not implemented
        </member>
        <member name="T:Cubemos.MemoryOrder">
            <summary>
            The enumeration for the order of the memory of the images. Fastest Moving Dimension is on the right
            </summary>
        </member>
        <member name="F:Cubemos.MemoryOrder.CM_HWC">
            Height-Width-Channel layout
        </member>
        <member name="F:Cubemos.MemoryOrder.CM_CWH">
            Channel-Width-Height layout
        </member>
        <member name="F:Cubemos.MemoryOrder.CM_CHW">
            Channel-Height-Width layout
        </member>
        <member name="T:Cubemos.ReturnCode">
            <summary>
            The enumeration for the available return codes from the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.ReturnCode.CM_SUCCESS">
            Success
        </member>
        <member name="F:Cubemos.ReturnCode.CM_ERROR">
            Error
        </member>
        <member name="F:Cubemos.ReturnCode.CM_FILE_DOES_NOT_EXIST">
            File could not be read. Either the path is wrong or the file is corrupt.
        </member>
        <member name="F:Cubemos.ReturnCode.CM_INVALID_ARGUMENT">
            One or more input arguments are invalid
        </member>
        <member name="F:Cubemos.ReturnCode.CM_INVALID_ACTIVATION_KEY">
            Invalid activation key provided
        </member>
        <member name="F:Cubemos.ReturnCode.CM_TIMEOUT">
            Timeout during the function call
        </member>
        <member name="F:Cubemos.ReturnCode.CM_ACTIVATION_FAILED">
            API activation failed
        </member>
        <member name="F:Cubemos.ReturnCode.CM_NOT_IMPLEMENTED">
            Not implemented
        </member>
        <member name="T:Cubemos.TargetComputeDevice">
            <summary>
            The enumeration for the target compute devices supported by the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.TargetComputeDevice.CM_CPU">
            Intel CPU
        </member>
        <member name="F:Cubemos.TargetComputeDevice.CM_GPU">
            Intel GPU
        </member>
        <member name="F:Cubemos.TargetComputeDevice.CM_MYRIAD">
            Intel MYRIAD ASIC
        </member>
        <member name="T:Cubemos.LogLevel">
            <summary>
            The enumeration for the available logging levels in the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_DEBUG">
            Most verbose mode, logs all messages including e.g. starting or stoping of methods
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_INFO">
            Includes important informations for the initialization stage and all error warning messages
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_WARNING">
            Only logs warnings and errors
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_ERROR">
            Errors are logged if normal processing is not possible
        </member>
        <member name="F:Cubemos.LogLevel.CM_LL_FATAL">
            Logs only critical messages. Even if no logging is initialized the fatal messages are logged to
            the console.
        </member>
        <member name="T:Cubemos.DataType">
            <summary>
            The enumeration for the available data types in the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.DataType.CM_UINT8">
            Unsigned 8-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_INT8">
            Signed 8-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_UINT16">
            Unsigned 16-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_INT16">
            Signed 16-bit integer values
        </member>
        <member name="F:Cubemos.DataType.CM_FLOAT16">
            16-bit floating point values
        </member>
        <member name="F:Cubemos.DataType.CM_FLOAT32">
            32-bit floating point values
        </member>
        <member name="F:Cubemos.DataType.CM_FLOAT64">
            64-bit floating point values
        </member>
        <member name="T:Cubemos.CM_Image">
            <summary>
            Thin wrapper for image data which is used as input for the inference calls
            </summary>
        </member>
        <member name="F:Cubemos.CM_Image.data">
            Pointer to the data buffer
        </member>
        <member name="F:Cubemos.CM_Image.dataType">
            Datatype for the data buffer enumerated from CUBEMOS_Datatype
        </member>
        <member name="F:Cubemos.CM_Image.nWidth">
            Width of the image data
        </member>
        <member name="F:Cubemos.CM_Image.nHeight">
            Height of the image data
        </member>
        <member name="F:Cubemos.CM_Image.nChannels">
            Number of channels of the data
        </member>
        <member name="F:Cubemos.CM_Image.nStride">
            Stride used for the image data
        </member>
        <member name="F:Cubemos.CM_Image.imageLayout">
            Memory layout of the image data enumerated from CUBEMOS_Memory_Order
        </member>
        <member name="T:Cubemos.CM_Buffer">
            <summary>
            The structure to hold the information of a data buffer used by the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.CM_Buffer.fpBuffer">
            Pointer to the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nBufferSize">
            Size of the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nWidth">
            Width of the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nHeight">
            Height of the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.nChannels">
            Number of channels in the data buffer
        </member>
        <member name="F:Cubemos.CM_Buffer.bufferLayout">
            Buffer memory layout as described in MemoryOrder
        </member>
        <member name="F:Cubemos.CM_Buffer.cLayerName">
            Name of the layer to which the data corresponds
        </member>
        <member name="T:Cubemos.CM_OutputBuffer">
            <summary>
            The structure to hold the information of the output data buffer used by the cubemos framework
            </summary>
        </member>
        <member name="F:Cubemos.CM_OutputBuffer.buffers">
            Pointer to the array of output data buffers
        </member>
        <member name="F:Cubemos.CM_OutputBuffer.nNumberOfOutputBuffers">
            Number of available output data buffers
        </member>
        <member name="T:Cubemos.Buffer">
            <summary>
            The structure to hold the managed data buffer in the C# bindings
            </summary>
        </member>
        <member name="F:Cubemos.Buffer.buffer">
            Storage order is defined by MemoryOrder
            Array of output data buffers
        </member>
        <member name="F:Cubemos.Buffer.layout">
            Memory layout is the order of the dimensions channel, image width and image height
        </member>
        <member name="F:Cubemos.Buffer.layername">
            Name of the layer to which the data corresponds
        </member>
        <member name="T:Cubemos.BaseSafeHandle">
            <summary>
            Base Class to wrap handles from C API in C# safely
            </summary>
        </member>
        <member name="T:Cubemos.BaseSafeHandle.DestroyHandle">
            <summary>
            Delegate to function responsible for destruction of a c handle
            </summary>
            <param name="handle">[in] C handle returned from C Api</param>
            <returns></returns>
        </member>
        <member name="F:Cubemos.BaseSafeHandle._destroyHandle">
            <summary>
            Defined by child class
            </summary>
        </member>
        <member name="M:Cubemos.BaseSafeHandle.#ctor(System.IntPtr,Cubemos.BaseSafeHandle.DestroyHandle)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the plugin handle </param>
            <param name="destroyHandle"> [in] Delegate to function responsible for destruction of a c handle </param>
            </summary>
        </member>
        <member name="P:Cubemos.BaseSafeHandle.IsInvalid">
            <summary>
            Checks if the handle is empty/not initialized
            </summary>
        </member>
        <member name="M:Cubemos.BaseSafeHandle.ReleaseHandle">
            <summary>
            Destroys the API handle and frees the internal buffers. It is called by garbage collector.
            </summary>
        </member>
        <member name="T:Cubemos.CM_SafeHandle">
            <summary>
            C# safe handle
            </summary>
        </member>
        <member name="M:Cubemos.CM_SafeHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="handle"> [in] pointer to the plugin handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.CM_AsyncRequestHandle">
            <summary>
            C# safe async inference request handle
            </summary>
        </member>
        <member name="M:Cubemos.CM_AsyncRequestHandle.#ctor(System.IntPtr)">
            <summary>
            API handle
            <param name="asyncHandle"> [in] pointer to the async request handle </param>
            </summary>
        </member>
        <member name="T:Cubemos.ConversionMethods">
            @cond INTERNAL
            <summary>
            Memory handling methods for layout reordering and buffer copying
            </summary>
        </member>
        <member name="M:Cubemos.ConversionMethods.CopyToManaged(Cubemos.CM_Buffer)">
            Copies the cubemos buffer to a managed memory buffer
            <param name="buffer"> buffer [in] buffer containing data as floats </param>
        </member>
        <member name="T:Cubemos.NativeMethods">
            @cond INTERNAL
            <summary>
            cubemos Api methods
            </summary>
        </member>
        <member name="T:Cubemos.Exception">
            <summary>
            General error class
            </summary>
        </member>
        <member name="T:Cubemos.ErrorHandler">
            <summary>
            Error handling for API return codes.
            </summary>
        </member>
        <member name="M:Cubemos.ErrorHandler.Handle(Cubemos.ReturnCode)">
            <summary>
            Error handle </summary>
            <param name="returnCode"> [in] cubemos return code to handle </param>
        </member>
        <member name="T:Cubemos.ImageDataWrapper">
            <summary>
            CM_Image buffer wrapper to be used for inference with cubemos API
            </summary>
        </member>
        <member name="F:Cubemos.ImageDataWrapper.cubemosImage">
            cubemos CM_Image data
        </member>
        <member name="M:Cubemos.ImageDataWrapper.#ctor(System.Drawing.Bitmap)">
            <summary>
            CM_Image buffer constructed from an image bitmap </summary>
            <param name="bitmap"> [in] RGB or 8bit Grayscale image in HWC layout </param>
        </member>
        <member name="M:Cubemos.ImageDataWrapper.#ctor(System.IntPtr,System.Int32,System.Int32,System.Int32)">
             <summary>
             Image buffer constructed from a byte array </summary>
             <param name="data"> [in] RGB or 8bit Grayscale image in HWC layout </param>
             <param name="width"> [in] image width in pixel (number of columns) </param>
             <param name="height"> [in] image height in pixel (number of rows) </param>
             <param name="channels"> [in] number of channels </param>
            
        </member>
        <member name="M:Cubemos.ImageDataWrapper.Dispose">
            Triggers image data wrapper disposal
        </member>
        <member name="T:Cubemos.DisposableApi`1">
            @endcond
            <summary>
            Base Class to ensure correct dispose of managed handles
            </summary>
        </member>
        <member name="F:Cubemos.DisposableApi`1.Handle">
            <summary>
            Handle of a Child class of BaseSafeHandle
            </summary>
        </member>
        <member name="F:Cubemos.DisposableApi`1.Disposed">
            <summary>
            Used to determine if Dispose() has already been called
            </summary>
        </member>
        <member name="M:Cubemos.DisposableApi`1.Dispose">
            <summary>
            Dispose the Managed handle
            </summary>
        </member>
        <member name="T:Cubemos.Api">
            <summary>
            The class to wrap the function calls to the cubemos framework
            </summary>
        </member>
        <member name="M:Cubemos.Api.#ctor(Cubemos.Plugin,System.String,System.String,System.String)">
            <summary>
            The constructor to initialise the cubemos framework with the desired cubemos plugin </summary>
            <param name="plugin"> [in] The desired cubemos plugin </param>
            <param name="activationKeyFile"> [in] Path to a valid activation key </param>
        </member>
        <member name="M:Cubemos.Api.CreateAsyncRequestHandle">
            <summary>
            Create and initialise a handle for performing an async inference request.
            The same request can be used to perform inference in a loop
            </summary>
            <returns> The initialised CMAsyncRequestHandle which can be used to perform
                      async inference and to wait on the result
            </returns>
        </member>
        <member name="M:Cubemos.Api.InitialiseLogging(Cubemos.LogLevel,System.Boolean,System.String)">
            <summary>
            Initial logging setup that should be called at the startup once </summary>
            <param name="loggingLevel"> [in] logging level specifies what messages are logged, levels are
            inclusive: if debug is set then all messages are logged, if error, then only error and fatal are
            logged </param>
            <param name="bWriteToConsole"> [in] logs are written to the standard console output </param>
            <param name="logFolder"> [in] path to the log folder. If the folder does not exist it will be created.
            If left empty no file logs will be created. </param>
        </member>
        <member name="M:Cubemos.Api.LoadModel(Cubemos.TargetComputeDevice,System.String)">
            <summary>
            Load the required DNN model on to the target compute device </summary>
            <param name="device"> [in] The target compute device onto which the DNN model shall be loaded </param>
            <param name="pathToDNNModel"> [in] The path to the requred DNN model </param>
        </member>
        <member name="M:Cubemos.Api.InferResults(System.Drawing.Bitmap,Cubemos.Buffer[]@)">
            <summary>
            Inference results from the input image which is readable by the loaded DNN model </summary>
            <param name="inputImage"> [in] The input image on which the inference has to be requested </param>
            <param name="buffers"> [out] The output buffer which is initialised with the results of the
            inference request </param>
        </member>
        <member name="M:Cubemos.Api.RequestInference(System.Drawing.Bitmap@,Cubemos.CM_AsyncRequestHandle@)">
             <summary>
             Request inference on the input image which is readable by the loaded DNN model </summary>
             <param name="bitmap"> [in] The input image on which the inference has to be requested </param>
             <param name="asyncRequestHandle"> [in] A valid handle to manage the async inference request </param>
            
        </member>
        <member name="M:Cubemos.Api.WaitForResult(Cubemos.CM_AsyncRequestHandle@,System.Int32,Cubemos.Buffer[]@)">
            <summary>
            C# managed call to get the result of the inferences into the output buffer </summary>
            <param name="asyncRequestHandle">[in] handle previously generated by calling CreateAsyncRequestHandle </param>
            <param name="timeout"> [in] The timeout value up to which the function shall block the thread to
            wait for results. Currently not used. </param>
            <param name="buffers"> [out] The output buffer which is initialised with the results of the
            inference request </param>
        </member>
        <member name="M:Cubemos.Api.WaitForResultNative(Cubemos.CM_AsyncRequestHandle,System.Int32,Cubemos.CM_OutputBuffer@)">
            <summary>
            Unmanaged call to get the result of the inferences into the output buffer </summary>
            <param name="asyncRequestHandle">[in] handle previously generated by calling CreateAsyncRequestHandle</param>
            <param name="timeout"> [in] The timeout value up to which the function shall block the thread to
            wait for results. Currently not used. </param>
            <param name="nativeOutputBuffer"> [out] The output buffer
            which is initialised with the results of the inference request </param>
        </member>
        <member name="M:Cubemos.Api.ReleaseOutputBuffer(Cubemos.CM_OutputBuffer@)">
            <summary>
            Unmanaged call to release the memory of the output buffer </summary>
            <param name="nativeOutputBuffer"> [in] The buffer to be released </param>
        </member>
        <member name="M:Cubemos.Api.DisposeAsyncRequestHandle(Cubemos.CM_AsyncRequestHandle@)">
            <summary>
            Dispose the cubemos async request handle
            </summary>
        </member>
    </members>
</doc>
